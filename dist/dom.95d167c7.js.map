{"version":3,"sources":["dom.js"],"names":["window","dom","create","str","container","document","createElement","innerHTML","trim","content","firstChild","after","oldNode","newNode","parentNode","insertBefore","nextSibling","before","append","parent","child","appendChild","wrap","newParent","remove","node","removeChild","empty","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","string","innerText","textContent","html","style","Object","object","key","objcet","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":";AAAAA,OAAOC,IAAM,CAMXC,OAAOC,SAAAA,GACCC,IAAAA,EAAYC,SAASC,cAAc,YAElCF,OADPA,EAAUG,UAAYJ,EAAIK,OACnBJ,EAAUK,QAAQC,YAO3BC,MAAMC,SAAAA,EAASC,GACbD,EAAQE,WAAWC,aAAaF,EAASD,EAAQI,cAOnDC,OAAOL,SAAAA,EAASC,GACdD,EAAQE,WAAWC,aAAaF,EAASD,IAO3CM,OAAOC,SAAAA,EAAQC,GACbD,EAAOE,YAAYD,IAOrBE,KAAKV,SAAAA,EAASW,GACZtB,IAAIgB,OAAOL,EAASW,GACpBtB,IAAIiB,OAAOK,EAAWX,IAOxBY,OAAOC,SAAAA,GAEEA,OADPA,EAAKX,WAAWY,YAAYD,GACrBA,GAOTE,MAAMF,SAAAA,GAGEG,IAFAC,IAAAA,EAAQ,GACVD,EAAIH,EAAKf,WACPkB,GACJC,EAAMC,KAAK7B,IAAIuB,OAAOC,EAAKf,aAC3BkB,EAAIH,EAAKf,WAEJmB,OAAAA,GASTE,KAAKN,SAAAA,EAAMO,EAAMC,GACZC,GAAqB,IAArBA,UAAUC,OACXV,EAAKW,aAAaJ,EAAMC,QACpB,GAAwB,IAArBC,UAAUC,OACVV,OAAAA,EAAKY,aAAaL,IAS7BM,KAAKb,SAAAA,EAAMc,GACNL,GAAqB,IAArBA,UAAUC,OACR,cAAeV,EAChBA,EAAKe,UAAYD,EAEjBd,EAAKgB,YAAcF,OAEjB,GAAwB,IAArBL,UAAUC,OACd,MAAA,cAAeV,EACTA,EAAKe,UAELf,EAAKgB,aAUlBC,KAAKjB,SAAAA,EAAMc,GACNL,GAAqB,IAArBA,UAAUC,OACXV,EAAKlB,UAAYgC,OACb,GAAwB,IAArBL,UAAUC,OACVV,OAAAA,EAAKlB,WAUhBoC,MAAMlB,SAAAA,EAAMO,EAAMC,GACbC,GAAqB,IAArBA,UAAUC,OACXV,EAAKkB,MAAMX,GAAQC,OACf,GAAwB,IAArBC,UAAUC,OAAa,CAC3B,GAAgB,iBAATH,EACDP,OAAAA,EAAKkB,MAAMX,GACd,GAAGP,aAAgBmB,OAAO,CACxBC,IAAAA,EAASb,EACX,IAAA,IAAIc,KAAOC,OACbtB,EAAKkB,MAAMG,GAAOD,EAAOC,MAKjCE,MAAO,CAELC,IAAIxB,SAAAA,EAAMyB,GACRzB,EAAK0B,UAAUF,IAAIC,IAGrB1B,OAAOC,SAAAA,EAAMyB,GACXzB,EAAK0B,UAAU3B,OAAO0B,IAGxBE,IAAI3B,SAAAA,EAAMyB,GACDzB,OAAAA,EAAK0B,UAAUE,SAASH,KAGnCI,GAAG7B,SAAAA,EAAM8B,EAAWC,GAClB/B,EAAKgC,iBAAiBF,EAAWC,IAEnCE,IAAIjC,SAAAA,EAAM8B,EAAWC,GACnB/B,EAAKkC,oBAAoBJ,EAAWC,IAEtCI,KAAKC,SAAAA,EAAUC,GACN,OAACA,GAASzD,UAAU0D,iBAAiBF,IAE9C1C,OAAOM,SAAAA,GACEA,OAAAA,EAAKX,YAEdkD,SAASvC,SAAAA,GACAA,OAAAA,EAAKuC,UAEdC,SAASxC,SAAAA,GACAyC,OAAAA,MAAMC,KAAK1C,EAAKX,WAAWkD,UAAUI,OAAO,SAAAC,GAAKA,OAAAA,IAAI5C,KAE9D6C,KAAK7C,SAAAA,GAEGG,IADFA,IAAAA,EAAIH,EAAKT,YACPY,GAAoB,IAAfA,EAAE2C,UACX3C,EAAIA,EAAEZ,YAEDY,OAAAA,GAET4C,SAAS/C,SAAAA,GAEDG,IADFA,IAAAA,EAAIH,EAAKgD,gBACP7C,GAAoB,IAAfA,EAAE2C,UACX3C,EAAIA,EAAE6C,gBAED7C,OAAAA,GAET8C,KAAKC,SAAAA,EAAUnB,GACT,IAAA,IAAIoB,EAAE,EAAEA,EAAED,EAASxC,OAAOyC,IAC5BpB,EAAGqB,KAAK,KAAMF,EAASC,KAG3BE,MAAMrD,SAAAA,GACEsD,IACFH,EADEG,EAAO9E,IAAI+D,SAASvC,EAAKX,YAE3B8D,IAAAA,EAAE,EAAEA,EAAEG,EAAK5C,QACV4C,EAAKH,KAAOnD,EADKmD,KAKfA,OAAAA","file":"dom.95d167c7.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n  /**\r\n   * 创建节点\r\n   * @param {String} str 创建的节点，eg: <div>1<div> \r\n   * @returns \r\n   */\r\n  create(str){\r\n    const container = document.createElement(\"template\");\r\n    container.innerHTML = str.trim();\r\n    return container.content.firstChild;\r\n  },\r\n  /**\r\n   * 在OldNode之后插入newNode\r\n   * @param {node} oldNode \r\n   * @param {node} newNode \r\n   */\r\n  after(oldNode, newNode){\r\n    oldNode.parentNode.insertBefore(newNode, oldNode.nextSibling);\r\n  },\r\n  /**\r\n   * 在oldNode之前插入newNode\r\n   * @param {node} oldNode \r\n   * @param {node} newNode \r\n   */\r\n  before(oldNode, newNode){\r\n    oldNode.parentNode.insertBefore(newNode, oldNode);\r\n  },\r\n  /**\r\n   * 子节点child插入父节点parent\r\n   * @param {node} parent 父节点\r\n   * @param {node} child 子节点\r\n   */\r\n  append(parent, child){\r\n    parent.appendChild(child)\r\n  },\r\n  /**\r\n   * 给oldNode 添加父节点\r\n   * @param {node} oldNode 原节点\r\n   * @param {node} newParent 新的父节点\r\n   */\r\n  wrap(oldNode, newParent){\r\n    dom.before(oldNode, newParent);\r\n    dom.append(newParent, oldNode);\r\n  },\r\n  /**\r\n   * 删除一个node\r\n   * @param {node} node 需要删除的node\r\n   * @returns 返回删除的node\r\n   */\r\n  remove(node){\r\n    node.parentNode.removeChild(node);\r\n    return node;\r\n  },\r\n  /**\r\n   * 清空子节点\r\n   * @param {node} node 删除子节点\r\n   * @returns 返回所有子节点，一层的\r\n   */\r\n  empty(node){\r\n    const array = [];\r\n    let x = node.firstChild;\r\n    while(x){\r\n      array.push(dom.remove(node.firstChild));\r\n      x = node.firstChild;\r\n    }\r\n    return array\r\n  },\r\n  /**\r\n   * \r\n   * @param {node} node 添加\\获取属性的节点\r\n   * @param {string} name 属性名\r\n   * @param {string} value 属性值 \r\n   * @returns \r\n   */\r\n  attr(node, name, value){\r\n    if(arguments.length === 3){\r\n      node.setAttribute(name, value);\r\n    }else if(arguments.length === 2) {\r\n      return node.getAttribute(name);\r\n    }\r\n  },\r\n  /**\r\n   * 插入或查询节点的文本内容\r\n   * @param {node} node 节点\r\n   * @param {string} string 插入的内容\r\n   * @returns 当只有一个入参返回节点的文本内容\r\n   */\r\n  text(node, string){\r\n    if(arguments.length === 2){\r\n      if('innerText' in node){\r\n        node.innerText = string;\r\n      }else {\r\n        node.textContent = string;\r\n      }\r\n    }else if(arguments.length === 1){\r\n      if('innerText' in node){\r\n        return node.innerText;\r\n      }else {\r\n        return node.textContent;\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * 向节点插入html\r\n   * @param {node} node 节点\r\n   * @param {string} string 插入的html内容 \r\n   * @returns 当只有一个入参，返回节点的html\r\n   */\r\n  html(node, string){\r\n    if(arguments.length === 2){\r\n      node.innerHTML = string;\r\n    }else if(arguments.length === 1){\r\n      return node.innerHTML;\r\n    }\r\n  },\r\n  /**\r\n   * 查看或设置节点样式\r\n   * @param {node} node 节点\r\n   * @param {string|Object} name 样式名或样式对象\r\n   * @param {string} value 样式值\r\n   * @returns 当入参是两个且第二个参数是string类型，返回该样式名的属性值\r\n   */\r\n  style(node, name, value){\r\n    if(arguments.length === 3){\r\n      node.style[name] = value;\r\n    }else if(arguments.length === 2){\r\n      if(typeof name === 'string') {\r\n        return node.style[name];\r\n      }else if(node instanceof Object){\r\n        const object = name;\r\n        for(let key in objcet){\r\n          node.style[key] = object[key]\r\n        }\r\n      }\r\n    }\r\n  },\r\n  class: {\r\n    /**增加class */\r\n    add(node, className){\r\n      node.classList.add(className);\r\n    },\r\n    /**移除class */\r\n    remove(node, className){\r\n      node.classList.remove(className);\r\n    },\r\n    /**查看是否有class */\r\n    has(node, className){\r\n      return node.classList.contains(className);\r\n    }\r\n  },\r\n  on(node, eventName, fn){\r\n    node.addEventListener(eventName, fn);\r\n  },\r\n  off(node, eventName, fn){\r\n    node.removeEventListener(eventName, fn);\r\n  },\r\n  find(selector, scope){\r\n    return (scope || document).querySelectorAll(selector);\r\n  },\r\n  parent(node){\r\n    return node.parentNode;\r\n  },\r\n  children(node){\r\n    return node.children;\r\n  },\r\n  siblings(node){\r\n    return Array.from(node.parentNode.children).filter(n => n!==node)\r\n  },\r\n  next(node){\r\n    let x = node.nextSibling;\r\n    while(x && x.nodeType === 3){\r\n      x = x.nextSibling;\r\n    }\r\n    return x;\r\n  },\r\n  previous(node){\r\n    let x = node.previousSibling;\r\n    while(x && x.nodeType === 3){\r\n      x = x.previousSibling;\r\n    } \r\n    return x;\r\n  },\r\n  each(nodeList, fn){\r\n    for(let i=0;i<nodeList.length;i++){\r\n      fn.call(null, nodeList[i]);\r\n    }\r\n  },\r\n  index(node){\r\n    const list = dom.children(node.parentNode);\r\n    let i;\r\n    for(i=0;i<list.length;i++){\r\n      if(list[i] === node){\r\n        break;\r\n      }\r\n    }\r\n    return i;\r\n  }\r\n}\r\n"]}